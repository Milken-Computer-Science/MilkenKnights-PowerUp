plugins {
    id "java"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2018.06.21"
    id 'org.hidetake.ssh' version '2.9.0'
}

def TEAM = 1836
def ROBOT_CLASS = "frc.team1836.robot.Robot"
wpi {
    wpilibVersion = '2018.4.1'
    ctreVersion = '5.3.1.0'
}
deploy {
    targets {
        target("roborio", edu.wpi.first.gradlerio.frc.RoboRIO) {
            // Team can be overridden by command line, for use with VSCode
            team = getTeamOrDefault(1836)
        }
    }
    artifacts {
        artifact('frcJava', edu.wpi.first.gradlerio.frc.FRCJavaArtifact) {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Phoenix (Talon SRX)
// and NavX.
dependencies {
    compile wpilib()
    compile ctre()
    compile navx()
    compile pathfinder()
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}

remotes {
    webServer {
        host = 'roborio-1836-frc.local'
        user = 'admin'
    }
}

ssh.settings {
    knownHosts = allowAnyHosts
}

task swerdUpdate {
    doLast {
        FileTree myFileTree = fileTree(dir: 'paths')
        def date = new Date()
        String formattedDate = date.format("yyyy-MM-dd").toString() + '/'
        def logBase = new File('logs')
        logBase.mkdirs()
        def logDir = new File(logBase.absolutePath + '/' + formattedDate)
        logDir.mkdirs()
        ssh.run {
            session(remotes.webServer) {
                put from: myFileTree.getFiles(), into: '/home/lvuser/paths'
               // get from: '/u/logs', into: 'logs/' + formattedDate, filter:{ it.name =~ /\.csv$/ }
                //get from: '/u', into: 'logs/', filter:{ it.name =~ /\.txt$/ }
                //remove '/u/logs'
            }
        }
    }
}



task deployAll {
    dependsOn 'swerdUpdate'
    dependsOn 'deploy'
    tasks.findByName('deploy').mustRunAfter 'swerdUpdate'
}

